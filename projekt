import openai_secret_manager
import openai
import pyttsx3
import speech_recognition as sr
from tkinter import *
from tkinter.scrolledtext import ScrolledText
import sqlite3
conn = sqlite3.connect('bot_database.db')
import random
class GUI:
    def __init__(self, master):
        self.master = master
        master.title("Bot z SI")

        # Pole wprowadzania tekstu
        self.input_field = Entry(master, width=60)
        self.input_field.pack(side=LEFT, padx=5, pady=5)

        # Przycisk do wysyłania wiadomości
        self.send_button = Button(master, text="Wyślij", command=self.send)
        self.send_button.pack(side=LEFT, padx=5, pady=5)

        # Pole czatu
        self.chat_window = ScrolledText(master, height=20, width=60)
        self.chat_window.pack(side=TOP, padx=5, pady=5)

        # Dodaj poniższe trzy linie kodu
        api_key = "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"
        openai.api_key = api_key

        # Inicjalizacja stanów
        self.states = [
            {
                "prompt": "Cześć! Jak masz na imię?",
                "response_property": "name",
                "next_state": 1
            },
            {
                "prompt": "Hej, {name}. Ile masz lat?",
                "response_property": "age",
                "next_state": 2
            },
            {
                "prompt": "Dzięki. Czego dzisiaj potrzebujesz?",
                "response_property": "need",
                "next_state": None
            }
        ]
        self.current_state = 0

        self.voice_mode = False
        self.database_mode = False
        # przycisk do włączania trybu bazy danych
        self.database_button = Checkbutton(master, text="Tryb bazy danych", command=self.toggle_database_mode)
        self.database_button.pack(side=LEFT, padx=5, pady=5)

        # przycisk do przełączenia się trybu mowy
        self.voice_button = Checkbutton(master, text="Tryb głosowy", command=self.toggle_voice_mode)
        self.voice_button.pack(side=LEFT, padx=5, pady=5)

    def voice_input(self):
        r = sr.Recognizer()
        mic = sr.Microphone()

        try:
            with mic as source:
                r.adjust_for_ambient_noise(source)
                audio = r.listen(source)
            self.input_field.delete(0, END)
            self.input_field.insert(0, r.recognize_google(audio, language='pl-PL'))
        except:
            pass

    def voice_output(self, response):
        engine = pyttsx3.init()
        engine.say(response)
        engine.runAndWait()
        self.voice_mode = False
        self.database_mode = False
    # przycisk do włączania trybu bazy danych
    def database_button(self):
        self.database_button = Checkbutton(self.master, text="Tryb bazy danych", command=self.toggle_database_mode)
        self.database_button.pack(side=LEFT, padx=5, pady=5)
    def toggle_database_mode(self):
        self.database_mode = not self.database_mode
        if self.database_mode:
            self.voice_button.config(state=DISABLED)
            self.input_field.insert(0, 'Tryb bazy danych włączony.')
        else:
            self.voice_button.config(state=NORMAL)
            self.input_field.delete(0, END)
            self.input_field.insert(0, '')

    def toggle_voice_mode(self):
        self.voice_mode = not self.voice_mode
        if self.voice_mode:
            self.database_button.config(state=DISABLED)
            self.input_field.insert(0, 'Tryb głosowy włączony.')
        else:
            self.database_button.config(state=NORMAL)
            self.input_field.delete(0, END)
            self.input_field.insert(0, '')

    def send(self):
        message = self.input_field.get()
        if not message.strip():
            return

        self.chat_window.insert(END, "Ty: " + message + "\n")

        # Sprawdź, czy bot jest odpowiedzią na poprzednią wiadomość
        if "Bot:" in self.chat_window.get("1.0", END):
            return

        state = self.states[self.current_state]

        # Przetwarzanie odpowiedzi na podstawie aktualnego stanu
        if state["response_property"] is not None:
            setattr(self, state["response_property"], message)
            self.current_state = state["next_state"]
            if self.current_state is not None:
                next_prompt = self.states[self.current_state]["prompt"].format(**self.__dict__)
                self.chat_window.insert(END, "Bot: " + next_prompt + "\n")
            else:
                self.chat_window.insert(END, "Bot: Dzięki za rozmowę!" + "\n")
        else:
            # gdy aktualny stan nie wymaga odpowiedzi
            response = ""
            if self.database_mode:
                # TODO: Obsługa zapytań z bazy danych
                response = "tryb bazy danych w trakcie budowy"
            elif self.voice_mode:
                # tryb mowy
                response = "tryb mowy w trakcie budowy"
            else:
                # tryb rozmowy
                prompt = "Ja nie wiem, co odpowiedzieć na to... Mógłbyś coś bardziej konkretnego napisać?"
                response = openai.Completion.create(
                    engine="text-davinci-002",
                    prompt=prompt,
                    max_tokens=150,
                    n=1,
                    stop=None,
                    temperature=0.7,
                )[0].text.strip()

            self.chat_window.insert(END, "Bot: " + response + "\n")

            # obsługa trybu mowy
            if self.voice_mode:
                self.voice_output(response)

            # obsługa trybu bazy danych
            if self.database_mode:
                # TODO: zapisywanie rozmów do bazy danych
                pass

        # Czyszczenie pola wprowadzania tekstu
        self.input_field.delete(0, END)

        responses = {
            "Cześć": ["Hej!", "Witaj!", "Siemka!"],
            "Jak się masz?": ["Dobrze, a ty?", "Świetnie, a ty?", "Trochę zmęczony, ale ogólnie dobrze."],
            "Co u ciebie?": ["Nic nowego, a u ciebie?", "Takie sobie, a u ciebie?", "Dobrze, dzięki za zapytanie."],
            "Do widzenia": ["Do zobaczenia!", "Pa!", "Miłego dnia!"],
        }

        def get_response(message):
            if message in responses:
                bot_response = random.choice(responses[message])
            else:
                bot_response = "Nie rozumiem, o czym mówisz."
            return bot_response

        while True:
            message = input("Ty: ")
            response = get_response(message)
            print("Bot:", response)

        # Jeśli jesteśmy w trybie bazy danych, zapisujemy wiadomość użytkownika i odpowiedź bota do bazy danych
        if self.database_mode:
            insert_data(message, bot_response, conn)


        # Jeśli jesteśmy w trybie głosowym, należy użyć metody voice_input do odebrania wiadomości za pomocą mowy
        if self.voice_mode:
            self.voice_input()

            # Sprawdź, czy wiadomość użytkownika została odebrana
            if not self.input_field.get().strip():
                return

            message = self.input_field.get()
            self.chat_window.insert(END, "Ty: " + message + "\n")

        # Uzyskiwanie odpowiedzi z OpenAI API
        response = openai.Completion.create(
            engine="davinci",
            prompt=state["prompt"].format(**vars(self)),
            temperature=0.9,
            max_tokens=140,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0
        )

        # Pobieranie odpowiedzi z OpenAI API
        bot_response = response.choices[0].text.strip()
        if self.database_mode: insert_data(message, bot_response, conn)
        elif self.voice_mode:
            self.voice_output(bot_response)


        # Aktualizacja wartości właściwości na podstawie odpowiedzi z AI
        setattr(self, state["response_property"], bot_response)

        # Aktualizacja stanu
        self.current_state = state["next_state"]

        # Wypisz odpowiedź bota
        self.chat_window.insert(END, "Bot: " + bot_response + "\n")
        self.input_field.delete(0, END)

        # Odpowiedź mówiona przez bota
        engine = pyttsx3.init()
        engine.say(bot_response)
        engine.runAndWait()

        self.input_field.delete(0, END)
def read_from_database(self):
    cursor = conn.execute("SELECT user_input, bot_response FROM bot_chat")
    for row in cursor.fetchall():
        self.chat_window.insert(END, "Ty: " + row[0] + "\n" + "Bot: " + row[1] + "\n")

def read_data(conn):
    cursor = conn.execute("SELECT user_input, bot_response from bot_chat")
    for row in cursor:
        print("User Input = ", row[0])
        print("Bot Response = ", row[1], "\n")


def insert_data(user_input, bot_response, conn):
  conn.execute("INSERT INTO bot_chat (user_input, bot_response) \
            VALUES (?, ?);", (user_input, bot_response))
  conn.commit()
def insert_data(user_input, bot_response, conn):
  conn.execute("INSERT INTO bot_chat (user_input, bot_response) \
            VALUES (?, ?);", (user_input, bot_response))
  conn.commit()
root = Tk()
my_gui = GUI(root)
root.mainloop()
